#!/usr/bin/env node

var async = require('async');
var http = require('http');
var app = require('../app');
var database = require('../lib/database.lib');
var logger = require('../lib/logger.lib');
var port = require('../lib/port.lib.js')();
var themes = require('../lib/themes.lib');
var installService = require('../core/services/install.service');

/**
 * 设置端口
 */
app.set('port', port);

/**
 * 启动服务器
 * %$async.waterfall函数是将所有的异步方法做成执行流，通过回调把参数向下一个异步方法传递,第二个参数是最后一个函数的回调方法
 */
async.waterfall([
  // 检查安装锁
  function (callback) {
    installService.status(function (err, hasInstall) {
      if (err) return callback(err);

      callback(null, hasInstall);
    });
  },
  function (hasInstall, callback) {
    if (!hasInstall) {
      return callback();
    }

    async.series([
      // 连接数据库
      database.connect,
      // 初始化主题
      function (callback) {
        themes.init(app, callback);
      }
    ], callback);
  }
], function (err) {
  if (err) throw err;

  //创建 HTTP 服务器
  var server = http.createServer(app);

  //监听端口
  server.listen(port);

  server.on('error', function (error) {
    if (error.syscall !== 'listen') throw error;

    var bind = typeof port === 'string' ? 'pipe ' + port : 'port ' + port;

    // 输出友好提示
    switch (error.code) {
      case 'EACCES':
        logger.system().error(bind + ' 需要有更高的权限');
        process.exit(1);

        break;
      case 'EADDRINUSE':
        logger.system().error(bind + ' 已被使用');
        process.exit(1);

        break;
      default:
        throw error;
    }
  });

  server.on('listening', function () {
    var addr = server.address();

    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;

    logger.system().info('正在监听 ' + bind);
  });
});

/**
 * %$  %$
 * 1. 以bash命令行的方式对服务或者应用进行启动，并把它放在bin目录下，指定语法环境node，完全按照node的开发方式开发，推荐写法。
 * 2. ①是否安装并设置了数据库相关配置，实际检查的是根目录下的install.lock文件是否存在；②根据检查结果选择将要执行程序；③启动服务，并处理服务启动过程中的可能阻碍。
 *
 */